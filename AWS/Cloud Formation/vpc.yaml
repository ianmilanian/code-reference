AWSTemplateFormatVersion: 2010-09-09
Description: VPC deployment.
Parameters:
  VPCCidrBlock:
    Type: String
  EnvironmentName:
    Type: String
  DMZSourceIp:
    Type: String
  LinuxAMI:
    Type: String
  AdminKey:
    Type: AWS::EC2::KeyPair::KeyName
Resources:
# VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      InstanceTenancy: default
      EnableDnsSupport: true
      EnableDnsHostnames: false
      CidrBlock: !Ref VPCCidrBlock
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-vpc'
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-igw'
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
# IAM Policies
  SSMManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub '${EnvironmentName}-${AWS::Region}-ssm'
      Path: /
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - ssm:DescribeAssociation
              - ssm:GetDeployablePatchSnapshotForInstance
              - ssm:GetDocument
              - ssm:DescribeDocument
              - ssm:GetManifest
              - ssm:GetParameter
              - ssm:GetParameters
              - ssm:ListAssociations
              - ssm:ListInstanceAssociations
              - ssm:PutInventory
              - ssm:PutComplianceItems
              - ssm:PutConfigurePackageResult
              - ssm:UpdateAssociationStatus
              - ssm:UpdateInstanceAssociationStatus
              - ssm:UpdateInstanceInformation
              - ssmmessages:CreateControlChannel
              - ssmmessages:CreateDataChannel
              - ssmmessages:OpenControlChannel
              - ssmmessages:OpenDataChannel
              - ec2messages:AcknowledgeMessage
              - ec2messages:DeleteMessage
              - ec2messages:FailMessage
              - ec2messages:GetEndpoint
              - ec2messages:GetMessages
              - ec2messages:SendReply
            Resource: '*'
# IAM Roles
  SSMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref SSMManagedPolicy
      RoleName: !Sub '${EnvironmentName}-ssm'
  FlowLogRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - vpc-flow-logs.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub '${EnvironmentName}-flowlog'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Resource: '*'
      RoleName: !Sub '${EnvironmentName}-flowlog'
# Instance Profiles
  SSMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref SSMRole]
      InstanceProfileName: !Sub '${EnvironmentName}-ssm'
# Subnets
  DMZSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [0, !GetAZs {Ref: 'AWS::Region'}] # 1a
      CidrBlock: !Sub
        - '${FirstOctet}.${SecondOctet}.0.0/24'
        - FirstOctet:  !Select [0, !Split ['.', !Ref VPCCidrBlock]]
          SecondOctet: !Select [1, !Split ['.', !Ref VPCCidrBlock]]
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-dmz'
  LambdaSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [1, !GetAZs {Ref: 'AWS::Region'}] # 1b
      CidrBlock: !Sub
        - '${FirstOctet}.${SecondOctet}.1.0/24'
        - FirstOctet:  !Select [0, !Split ['.', !Ref VPCCidrBlock]]
          SecondOctet: !Select [1, !Split ['.', !Ref VPCCidrBlock]]
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-lambda'
  AdminSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [1, !GetAZs {Ref: 'AWS::Region'}] # 1b
      CidrBlock: !Sub
        - '${FirstOctet}.${SecondOctet}.2.0/24'
        - FirstOctet:  !Select [0, !Split ['.', !Ref VPCCidrBlock]]
          SecondOctet: !Select [1, !Split ['.', !Ref VPCCidrBlock]]
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-admin'
  RDSSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [0, !GetAZs {Ref: 'AWS::Region'}] # 1a
      CidrBlock: !Sub
        - '${FirstOctet}.${SecondOctet}.3.0/24'
        - FirstOctet:  !Select [0, !Split ['.', !Ref VPCCidrBlock]]
          SecondOctet: !Select [1, !Split ['.', !Ref VPCCidrBlock]]
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-rds'
  UserSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [1, !GetAZs {Ref: 'AWS::Region'}] # 1b
      CidrBlock: !Sub
        - '${FirstOctet}.${SecondOctet}.4.0/24'
        - FirstOctet:  !Select [0, !Split ['.', !Ref VPCCidrBlock]]
          SecondOctet: !Select [1, !Split ['.', !Ref VPCCidrBlock]]
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-user'
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [1, !GetAZs {Ref: 'AWS::Region'}] # 1b
      CidrBlock: !Sub
        - '${FirstOctet}.${SecondOctet}.5.0/24'
        - FirstOctet:  !Select [0, !Split ['.', !Ref VPCCidrBlock]]
          SecondOctet: !Select [1, !Split ['.', !Ref VPCCidrBlock]]
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-public'
# Route Tables
  DMZRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-dmz'
  LambdaRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-lambda'
  AdminRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-admin'
  RDSRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-rds'
  UserRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-user'
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-public'
# Routes
  DMZRoute:
    DependsOn: AttachGateway
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref DMZRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  LambdaRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref LambdaRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
  AdminRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref AdminRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
  RDSRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RDSRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
  UserRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref UserRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
  PublicRoute:
    DependsOn: AttachGateway
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
# Route Table Associations
  DMZSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DMZSubnet
      RouteTableId: !Ref DMZRouteTable
  LambdaSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref LambdaSubnet
      RouteTableId: !Ref LambdaRouteTable
  AdminSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref AdminSubnet
      RouteTableId: !Ref AdminRouteTable
  RDSSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref RDSSubnet
      RouteTableId: !Ref RDSRouteTable
  UserSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref UserSubnet
      RouteTableId: !Ref UserRouteTable
  PublicRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable
# Elastic IPs
  VPNServerEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
# Elastic IP Associations
  VPNServerEIPAssociation:
    DependsOn: VPNServer
    Type: AWS::EC2::EIPAssociation
    Properties:
      EIP: !Ref VPNServerEIP
      InstanceId: !Ref VPNServer
# NAT Gateway
  NATGateway:
    DependsOn: AttachGateway
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-nat'
# Security Groups
  DMZSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: DMZSecurityGroup
      GroupDescription: Allow incoming VPN connections and access to VPN Access Server from local network.
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 1194
          ToPort: 1194
          CidrIp: 0.0.0.0/0
          Description: openvpn tunnel
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref DMZSourceIp
          Description: openvpn admin console - public
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Sub
            - '${FirstOctet}.${SecondOctet}.2.0/24'
            - FirstOctet:  !Select [0, !Split ['.', !Ref VPCCidrBlock]]
              SecondOctet: !Select [1, !Split ['.', !Ref VPCCidrBlock]]
          Description: openvpn admin console - local
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-dmz'
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: LambdaSecurityGroup
      GroupDescription: Allow outbound lambda traffic.
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-lambda'
  AdminSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: AdminSecurityGroup
      GroupDescription: Allow rdp traffic from DMZ subnet.
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: !Sub
            - '${FirstOctet}.${SecondOctet}.1.0/24'
            - FirstOctet:  !Select [0, !Split ['.', !Ref VPCCidrBlock]]
              SecondOctet: !Select [1, !Split ['.', !Ref VPCCidrBlock]]
          Description: lambda
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: !Sub '${VPNServer.PrivateIp}/32'
          Description: openvpn - rdp traffic
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-admin'
  UserSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: UserSecurityGroup
      GroupDescription: Allow web traffic from private subnet.
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: !Sub '${VPNServer.PrivateIp}/32'
          Description: openvpn - rdp traffic
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: http traffic
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: https traffic
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-user'
# NACLs
  DMZNacl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-dmz'
  DMZNaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref DMZSubnet
      NetworkAclId: !Ref DMZNacl
  DMZNaclInboundRule5:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DMZNacl
      RuleNumber: 5
      Protocol: -1
      RuleAction: Allow
      Egress: false
      CidrBlock: !Ref DMZSourceIp
  DMZNaclInboundRule10:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DMZNacl
      RuleNumber: 10
      Protocol: -1
      RuleAction: Allow
      Egress: false
      CidrBlock: !Sub
        - '${FirstOctet}.${SecondOctet}.0.0/16'
        - FirstOctet:  !Select [0, !Split ['.', !Ref VPCCidrBlock]]
          SecondOctet: !Select [1, !Split ['.', !Ref VPCCidrBlock]]
  DMZNaclInboundRule15:
    # Allows inbound return traffic from hosts on the internet that are responding to requests originating in the subnet.
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DMZNacl
      RuleNumber: 15
      Protocol: 6
      RuleAction: Allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 32768
        To: 65535
  DMZNaclOutboundRule100:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DMZNacl
      RuleNumber: 100
      Protocol: -1
      RuleAction: Allow
      Egress: true
      CidrBlock: 0.0.0.0/0
# Log Groups
  VPCLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
      LogGroupName: !Sub '/aws/vpc/${EnvironmentName}-flowlogs'
  VPCFlowLog:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !GetAtt FlowLogRole.Arn
      LogGroupName: !Ref VPCLogGroup
      ResourceId: !Ref VPC
      ResourceType: 'VPC'
      TrafficType: 'ACCEPT'
# Servers
  VPNServer:
    DependsOn: AttachGateway
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !Select [0, !GetAZs {Ref: 'AWS::Region'}] # 1a
      ImageId: !Ref LinuxAMI # Ubuntu 18.04
      InstanceType: t3.micro
      KeyName: !Ref AdminKey
      SecurityGroupIds: [!Ref DMZSecurityGroup]
      SourceDestCheck: false
      SubnetId: !Ref DMZSubnet
      IamInstanceProfile: !Ref SSMInstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 50
            Encrypted: true
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash -x
            apt update && apt -y install ca-certificates wget net-tools
            wget -qO - https://as-repository.openvpn.net/as-repo-public.gpg | apt-key add -
            echo "deb http://as-repository.openvpn.net/as/debian bionic main" | tee /etc/apt/sources.list.d/openvpn-as-repo.list > /dev/null
            apt update && apt -y install openvpn-as
            /usr/local/openvpn_as/scripts/sacli --key "host.name" --value ${VPNServerEIP} ConfigPut
            /usr/local/openvpn_as/scripts/sacli --key "vpn.server.routing.private_access" --value "no" ConfigPut
            /usr/local/openvpn_as/scripts/sacli --user admins  --key "type"           --value "group"                                       UserPropPut
            /usr/local/openvpn_as/scripts/sacli --user admins  --key "group_declare"  --value "true"                                        UserPropPut
            /usr/local/openvpn_as/scripts/sacli --user admins  --key "prop_superuser" --value "true"                                        UserPropPut
            /usr/local/openvpn_as/scripts/sacli --user admins  --key "access_to.0"    --value "+SUBNET:${FirstOctet}.${SecondOctet}.0.0/16" UserPropPut
            /usr/local/openvpn_as/scripts/sacli --user users   --key "type"           --value "group"                                       UserPropPut
            /usr/local/openvpn_as/scripts/sacli --user users   --key "group_declare"  --value "true"                                        UserPropPut
            /usr/local/openvpn_as/scripts/sacli --user users   --key "prop_superuser" --value "false"                                       UserPropPut
            /usr/local/openvpn_as/scripts/sacli --user users   --key "access_to.0"    --value "+SUBNET:${FirstOctet}.${SecondOctet}.4.0/24" UserPropPut
            /usr/local/openvpn_as/scripts/sacli --user openvpn --key "conn_group"     --value "admins"                                      UserPropPut
            service openvpnas restart
            # echo "openvpn:<password goes here>" | sudo chpasswd
          - FirstOctet:  !Select [0, !Split ['.', !Ref VPCCidrBlock]]
            SecondOctet: !Select [1, !Split ['.', !Ref VPCCidrBlock]]
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-vpn'
        - Key: Startup
          Value: 'Yes'
Outputs:
  AdminPortal:
    Description: OpenVPN admin portal.
    Value: !Sub 'https://${VPNServerEIP}/admin'
  VPC:
    Value: !Ref VPC
    Export:
      Name: VPC
  AdminSubnet:
    Value: !Ref AdminSubnet
    Export:
      Name: AdminSubnet
  LambdaSubnet:
    Value: !Ref LambdaSubnet
    Export:
      Name: LambdaSubnet
  RDSSubnet:
    Value: !Ref RDSSubnet
    Export:
      Name: RDSSubnet
  AdminSecurityGroup:
    Value: !Ref AdminSecurityGroup
    Export:
      Name: AdminSecurityGroup
  LambdaSecurityGroup:
    Value: !Ref LambdaSecurityGroup
    Export:
      Name: LambdaSecurityGroup
  SSMManagedPolicy:
    Value: !Ref SSMManagedPolicy
    Export:
      Name: SSMManagedPolicy
  DMZNacl:
    Value: !Ref DMZNacl
    Export:
      Name: DMZNacl
