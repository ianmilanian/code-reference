AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Creates a VPN Server in a DMZ that allows a SourceIP to connect to a local Network.
Parameters:
  Name:
    Description: The environment name to prepend to AWS resources.
    Type: String
  KeyName:
    Description: The EC2 key pair to associate with the VPN / RDP server.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  SourceIP:
    Description: The source address (x.x.x.x/32) to allow traffic into DMZ.
    Type: String
  IPv4CiderBlock:
    Description: The IPv4 cidr block (x.x.x.x/21) to use when building VPC.
    Type: String
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref Name, vpc]]
      CidrBlock: !Ref IPv4CiderBlock
  VPCGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref Name, ig]]
  VPCGatewayAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref VPCGateway
  NAT:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [0, !GetAZs {Ref: 'AWS::Region'}] # us-east-1a
      CidrBlock: !Select [0, !Cidr [!Select [2, !Cidr [!GetAtt VPC.CidrBlock, 3, 8]], 1, 4]] # x.x.2.0/28
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref Name, subnet, nat]]
  NATEip:
    DependsOn: VPCGatewayAttach
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATEip.AllocationId
      SubnetId: !Ref NAT
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref Name, nat, gateway]]
  NATRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref Name, routetable, nat]]
  NATRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref VPCGateway
      RouteTableId: !Ref NATRouteTable
  NATRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref NAT
      RouteTableId: !Ref NATRouteTable
  DMZSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [0, !GetAZs {Ref: 'AWS::Region'}] # us-east-1a
      CidrBlock: !Select [0, !Cidr [!Select [0, !Cidr [!GetAtt VPC.CidrBlock, 3, 8]], 1, 5]] # x.x.0.0/27
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref Name, subnet, dmz]]
  DMZNacl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
          - Key: Name
            Value: !Join ['-', [!Ref Name, nacl, dmz]]
  DMZNaclEntry5:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DMZNacl
      RuleNumber: 5
      Protocol: 17
      RuleAction: allow
      Egress: false
      CidrBlock: !Ref SourceIP
      PortRange: {From: 1194, To: 1194}
  DMZNaclEntry10:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DMZNacl
      RuleNumber: 10
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: !Ref SourceIP
      PortRange: {From: 3398, To: 3398}
  DMZNaclEntry15:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DMZNacl
      RuleNumber: 15
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: !Ref SourceIP
      PortRange: {From: 443, To: 443}
  DMZNaclEntry20:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DMZNacl
      RuleNumber: 20
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: !Select [0, !Cidr [!Select [1, !Cidr [!GetAtt VPC.CidrBlock, 3, 8]], 1, 7]] # SVRSubnet
      PortRange: {From: 1194, To: 1194}
  DMZNaclEntry100:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DMZNacl
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange: {}
  DMZNaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref DMZSubnet
      NetworkAclId: !Ref DMZNacl
  DMZRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref Name, routetable, dmz]]
  DMZRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref VPCGateway
      RouteTableId: !Ref DMZRouteTable
  DMZRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DMZSubnet
      RouteTableId: !Ref DMZRouteTable
  DMZSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ['-', [!Ref Name, secgrp, dmz]]
      GroupDescription: Allow incoming VPN connections and access to VPN Access Server from local network.
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - {IpProtocol: tcp, FromPort: 22,   ToPort: 22,   CidrIp: !Select [0, !Cidr [!Select [1, !Cidr [!GetAtt VPC.CidrBlock, 3, 8]], 1, 7]]} # SVRSubnet
        - {IpProtocol: tcp, FromPort: 943,  ToPort: 943,  CidrIp: !Select [0, !Cidr [!Select [1, !Cidr [!GetAtt VPC.CidrBlock, 3, 8]], 1, 7]]} # SVRSubnet
        - {IpProtocol: tcp, FromPort: 443,  ToPort: 443,  CidrIp: 0.0.0.0/0}
        - {IpProtocol: tcp, FromPort: 1194, ToPort: 1194, CidrIp: 0.0.0.0/0}
      SecurityGroupEgress:
        - {IpProtocol: -1,  FromPort: -1,   ToPort: -1,   CidrIp: 0.0.0.0/0}
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref Name, secgrp, dmz]]
  VPNServer:
    DependsOn: VPCGatewayAttach
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !Select [0, !GetAZs {Ref: 'AWS::Region'}] # us-east-1a
      ImageId: ami-056907df001eeca0e # OpenVPN Access Server 2.7.4 (Added 07/24/2019)
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      SecurityGroupIds: [!Ref DMZSecurityGroup]
      SourceDestCheck: false
      SubnetId: !Ref DMZSubnet
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref Name, ec2, vpn]]
      UserData: !Base64
        !Sub |
          #!/bin/bash
          yum update -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --s ${AWS::StackName} --r VPNServer --c config --region ${AWS::Region}
          yum -y update
          /opt/aws/bin/cfn-signal -e $? --s ${AWS::StackName} --r VPNServer --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Count: '1'
        Timeout: PT10M
    Metadata:
      AWS::CloudFormation::Init:
        config: 
          packages: 
            :
          groups: 
            :
          users: 
            :
          sources: 
            :
          files: 
            :
          commands: 
            :
          services: 
            :
  VPNServerEip:
    DependsOn: VPNServer
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref VPNServer
  SVRSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [1, !GetAZs {Ref: 'AWS::Region'}] # us-east-1b
      CidrBlock: !Select [0, !Cidr [!Select [1, !Cidr [!GetAtt VPC.CidrBlock, 3, 8]], 1, 7]] # x.x.1.0/25
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref Name, subnet, svr]]
  SVRRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref Name, routetable, svr]]
  SVRRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
      RouteTableId: !Ref SVRRouteTable
  SVRRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SVRSubnet
      RouteTableId: !Ref SVRRouteTable
  SVRSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ['-', [!Ref Name, secgrp, svr]]
      GroupDescription: Allow all traffic from SVR subnet and ssh/rdp traffic from DMZ subnet.
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - {IpProtocol: -1,  FromPort: -1,   ToPort: -1,   CidrIp: !Select [0, !Cidr [!Select [1, !Cidr [!GetAtt VPC.CidrBlock, 3, 8]], 1, 7]]} # SVRSubnet
        - {IpProtocol: tcp, FromPort: 3389, ToPort: 3389, CidrIp: !Select [0, !Cidr [!Select [0, !Cidr [!GetAtt VPC.CidrBlock, 3, 8]], 1, 5]]} # DMZSubnet
      SecurityGroupEgress:
        - {IpProtocol: -1,  FromPort: -1,   ToPort: -1,   CidrIp: 0.0.0.0/0}
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref Name, secgrp, svr]]
  RDPServer:
    DependsOn: VPCGatewayAttach
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !Select [1, !GetAZs {Ref: 'AWS::Region'}] # us-east-1b
      ImageId: ami-067ff23da8261d1c7 # Microsoft Windows Server 2012 R2 Base
      InstanceType: t2.small
      KeyName: !Ref KeyName
      SecurityGroupIds: [!Ref SVRSecurityGroup]
      SubnetId: !Ref SVRSubnet
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref Name, ec2, rdp]]